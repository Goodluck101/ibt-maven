
pipeline{
    agent any

    tools{
        maven 'maven_3.8'

    }

    stages{

    stage('Git Checkout'){
       steps{
            git branch: 'feature_sagardhungel', changelog: false, credentialsId: '8a16bdb6-76b6-495b-be26-33eb23295c5c', poll: false, url: 'https://github.com/IBT-learning/ibt-maven.git'
       }

    }

   stage('Validate'){
          steps{
            withMaven( maven: 'maven_3.9.3') {
                sh 'mvn -version'
                sh 'mvn validate'
            }
          }
       }

       stage('Compile'){
                 steps{
                      sh 'mvn -version'
                       sh 'mvn compile'
                   }
                 }

        stage('Test'){
                 steps{
                      sh 'mvn -version'
                       sh 'mvn test'
                   }
                 }

                 stage('SonarQube Scan'){
                                 environment{
                                 sonarScan = tool 'ibt-sonarqube'
                                 }
                                             steps{
                                                withSonarQubeEnv(credentialsId: 'student-sonar-token', installationName: 'IBT sonarqube') {
                                                     sh "${env.sonarScan}/bin/sonar-scanner"
                                                  }
                                               }
                                             }

          stage('Package'){
                           steps{
                                sh 'mvn -version'
                                 sh 'mvn package'
                             }
                           }

           stage('Upload to Artifactory'){
                              steps{
                                  withCredentials([file(credentialsId: 'settings file (Sagar)', variable: 'mvn_settings_sagar')]) {
                                      sh 'mvn deploy -s $mvn_settings_sagar'
                                  }

                                }
                              }

            stage('Upload to Artifactory - ConfigFile'){
                  steps{
                       configFileProvider([configFile(fileId: 'artifactory-settings', targetLocation: 'mvn_settings_managed', variable: 'mvn_settings_managed')]) {
                                sh 'mvn deploy -s $mvn_settings_managed'
                           }
            }
          }
          stage('Dependency Scan'){
                       steps{
                           dependencyCheck additionalArguments: '''
                                 -o "./"
                                 -s "./"
                                 -f "ALL"
                                 --prettyPrint \'\'\', odcInstallation: \'dependency-check\'''', odcInstallation: 'dependency-check'
                                 dependencyCheckPublisher pattern: 'dependency-check-report.xml'
                       }
                  }



   }
}