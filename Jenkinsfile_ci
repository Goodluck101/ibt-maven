pipeline{
    agent any

    tools{
        maven 'maven_3.8'
       }

    stages{
        stage('Git checkout'){
            steps{
                git branch: 'feature_gunjanvm', changelog: false, credentialsId: 'ibt', poll: false, url: 'https://github.com/IBT-learning/ibt-maven.git'
            }
        }
        stage('Validate'){
            steps{
                withMaven(maven: 'maven_3.9.3') {
                    sh 'mvn --version'
                    sh 'mvn validate'
                }
            }
        }
        stage('Compile'){
            steps{
                sh 'mvn --version'
                sh 'mvn compile'
            }
        }
        stage('Test'){
                    steps{
                        sh 'mvn --version'
                        sh 'mvn test'
                    }
                }
          stage('SonarQube Scan'){
            environment{
                sonarScan = tool 'ibt-sonarqube'
            }
            steps{
                withSonarQubeEnv(credentialsId: 'student-sonar-token', installationName: 'IBT sonarqube') {
                   sh "${env.sonarScan}/bin/sonar-scanner"
                }
            }
          }
          stage('Package'){
                             steps{
                                 sh 'mvn --version'
                                 sh 'mvn package'
                             }
                         }

           stage('upload to Artifactory'){
            steps{
                withCredentials([file(credentialsId: 'mvn_settings_gunj', variable: 'maven_settings_gunjan')]) {
                    sh 'mvn deploy -s $maven_settings_gunjan'
                }
            }
           }
           stage('upload to Artifactory - configFile'){
            steps{
                configFileProvider([configFile(fileId: 'artifactory-settings', targetLocation: 'mvn_settings_managed', variable: 'mvn_settings_managed')]) {
                    sh 'mvn deploy -s $mvn_settings_managed'
                }
            }
           }
           stage('Dependency Scan'){
            steps{
                dependencyCheck additionalArguments: '''
                        -o "./"
                        -s "./"
                        -f "ALL"
                        --prettyPrint \'\'\', odcInstallation: \'dependency-check\'''', odcInstallation: 'dependency-check'
                dependencyCheckPublisher pattern: 'dependency-check-report.xml'
            }
           }
           stage('Invoke Ansible Playbook'){
            steps{
                ansiblePlaybook (
                            become: true,
                            credentialsId: 'server_ssh_pwd',
                            installation: 'ansible',
                            inventory: 'inventory.txt',
                            playbook: 'tomcat.yml'
                          )
            }
           }
           stage('Deploy to Dev'){
            steps{
               script{
                def remote = [name: 'dev', host: '143.110.222.231', allowAnyHosts: true]
                withCredentials([usernamePassword(credentialsId: 'server-ssh-pw', passwordVariable: 'password', usernameVariable: 'user')]) {
                    remote.user = user
                    remote.password = password
                sshPut remote: remote, from: 'target/ibt-maven-6.2-SNAPSHOT.jar', into: '/opt/tomcat/webapps'
                }
               }

            }
           }



    }
}