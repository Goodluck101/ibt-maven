pipeline{
    agent any

    tools{
        maven 'maven_3.8'
    }

    stages{
        stage('Git checkout')
        {
            steps{
                git branch: 'feature_tagne', changelog: false, credentialsId: 'Github_cred_tagne', poll: false, url: 'https://github.com/IBT-learning/ibt-maven.git'
            }
        }
       stage('Validate'){
                 steps{
                 withMaven(maven: 'maven_3.9.3') {
                      sh 'mvn --version'
                      sh 'mvn validate'

                }
                       }

        }
        stage('Compile'){
            steps{
                sh 'mvn --version'
                sh 'mvn compile'
                 }
        }
        stage('SonarQube Scan'){
            environment{
                sonarScan = tool 'ibt-sonarqube'
            }
            steps{
                withSonarQubeEnv(credentialsId: 'student-sonar-token', installationName: 'IBT sonarqube') {
                   sh "${env.sonarScan}/bin/sonar-scanner"
                }
            }
        }

        stage('Test'){
            steps{
                sh 'mvn --version'
                sh 'mvn test'
                 }
        }
        stage('Package'){
                    steps{
                        sh 'mvn --version'
                        sh 'mvn package'
                         }
                }

                stage('upload to artifactory'){
                            steps{
                  withCredentials([file(credentialsId: 'Settings_tagne', variable: 'maven_settings_tagne')]) {
                      sh 'mvn deploy -s $maven_settings_tagne'
                  }
                                 }
                        }


               stage('upload to artifactory configuration file'){
                                           steps{
                                 configFileProvider([configFile(fileId: 'artifactory-settings', variable: 'mvn_settings_managed')]) {
                                     sh 'mvn deploy -s $mvn_settings_managed'
                                 }
                                 }
                                                }

               stage('Dependency Scan'){
                steps{
                    dependencyCheck additionalArguments: '''
                    -o"./"
                    -s"./"
                    -f"ALL"
                    --prettyPrint \'\'\', odcinstallation: \'dependency-check\'
                    ''', odcInstallation: 'dependency-check'
                    dependencyCheckPublisher pattern: 'dependency-check-report.xml'
                    }
                }

                stage('Deploy to Dev'){
                    steps{
                        script{
                        def remote = [name: 'dev', host: '64.23.145.27', allowAnyHosts: true]
                        withCredentials([usernamePassword(credentialsId: 'server-ssh-pw', passwordVariable: 'password', usernameVariable: 'user')]) {
                            remote.user = user
                            remote.password = password
                            sshPut remote: remote, from: 'target/ibt-maven-9.0-SNAPSHOT.jar, into '/opt/tomcat/webapps''
                        }
                        }
                    }
                }
            }
        }
