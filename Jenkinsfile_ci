pipeline{
    agent any

    tools{
        maven 'maven_3.8'
    }
    stages{
        stage('Git checkout'){
            steps{
                git branch: 'feature_joseph', changelog: false, credentialsId: 'Joseph', poll: false, url: 'https://github.com/IBT-learning/ibt-maven.git'
            }
        }
        stage('Validate'){
            steps{
              withMaven(maven: 'maven_3.9.3') {
              sh 'mvn --version'
              sh 'mvn validate'
              }
            }
        }


        stage('Compile'){
            steps{
                sh 'mvn --version'
                sh 'mvn compile'

            }
        }
        stage('Test'){
             steps{
                sh 'mvn --version'
                sh 'mvn test'

            }
        }
         stage('SonarQube Scan'){
                    environment{
                        sonarScan = tool 'ibt-sonarqube'
                    }
                    steps{
                        withSonarQubeEnv(credentialsId: 'student-sonar-token', installationName: 'IBT sonarqube') {
                        sh "${env.sonarScan}/bin/sonar-scanner"
                        }
                    }
         }

        stage('Package'){
             steps{
                sh 'mvn --version'
                sh 'mvn package'
            }
        }
        stage('upload to Artifactory'){
            steps{
                withCredentials([file(credentialsId: 'joseph_settings_two', variable: 'maven_setting_joseph')]) {
                    sh 'mvn deploy -s $maven_setting_joseph'
                }

            }
        }
        stage('upload to Artifactory - configFile'){
            steps{
            configFileProvider([configFile(fileId: 'artifactory-settings', targetLocation: 'mvn_settings_managed', variable: 'mvn_settings_managed')]) {
               sh 'mvn deploy -s $mvn_settings_managed'
            }
           }
        }
        stage('Dependency Scan'){
            steps{
                 dependencyCheck additionalArguments: '''
                                        -o "./"
                                        -s "./"
                                        -f "ALL"
                                        --prettyPrint \'\'\', odcInstallation: \'dependency-check\'''', odcInstallation: 'dependency-check'
                                dependencyCheckPublisher pattern: 'dependency-check-report.xml'
            }
        }
        stage('Deploy to Dev')
            steps{
                script{
                    def remote = [name: 'dev', host: '143.198.135.150', allowAnyHosts: true]
                    withCredentials([usernamePassword(credentialsId: 'server-ssh-pw', passwordVariable: 'password', usernameVariable: 'user')]) {
                        remote.user = user
                        remote.password = password
                    sshPut remote: remote, from: 'target/ibt-maven-3.4-SNAPSHOT.jar', into: '/opt/tomcat/webapps'
                    }
                }
            }
        }
    }




