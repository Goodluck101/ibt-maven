pipeline{
    agent any

    tools{
          maven 'maven_3.8'
     }
    stages{
        stage('Git Checkout'){
            steps{
                git branch: 'feature_wale_alake', changelog: false, credentialsId: 'GitHub_cred_walealake', poll: false, url: 'https://github.com/IBT-learning/ibt-maven.git'
            }
        }
        stage('Validate'){
            steps{
                withMaven(maven: 'maven_3.9.3') {
                    sh 'mvn --version'
                    sh 'mvn validate'
                }
             }
        }
        stage('Compile'){
                    steps{
                        sh 'mvn --version'
                        sh 'mvn compile'
                    }
         }
          stage('Test'){
                         steps{
                                 sh 'mvn --version'
                                 sh 'mvn test'
                         }
           }
        stage('SonarQube Scan'){
                    environment{
                        sonarScan = tool 'ibt-sonarqube'
                    }
                    steps{
                        withSonarQubeEnv(credentialsId: 'student-sonar-token', installationName: 'IBT sonarqube') {
                           sh "${env.sonarScan}/bin/sonar-scanner"
                        }
                    }
                  }
        stage('Package'){
                          steps{
                              sh 'mvn --version'
                               sh 'mvn package'
                          }
        }
         stage('upload to Artifactory'){
               steps{
                    withCredentials([file(credentialsId: 'walealake_settings', variable: 'maven_settings_walealake')]) {
                     sh 'mvn deploy -s $maven_settings_walealake'
                  }

               }
         }
         stage('upload to Artifactory - configFile'){
                     steps{
                         configFileProvider([configFile(fileId: 'artifactory-settings', targetLocation: 'mvn_settings_managed', variable: 'mvn_settings_managed')]) {
                           sh 'mvn deploy -s $mvn_settings_managed'
                         }
                     }
         }
          stage('Dependency Scan'){
                     steps{
                         dependencyCheck additionalArguments: '''
                                 -o "./"
                                 -s "./"
                                 -f "ALL"
                                 --prettyPrint \'\'\', odcInstallation: \'dependency-check\'''', odcInstallation: 'dependency-check'
                         dependencyCheckPublisher pattern: 'dependency-check-report.xml'
                     }
          }
          stage('Deploy to Dev'){
            steps{
                script{
                    def remote = [name: 'dev', host: '134.122.5.25', allowAnyHosts: true]
                    withCredentials([usernamePassword(credentialsId: 'walealake-ssh-tomcat', passwordVariable: 'password', usernameVariable: 'user')]) {
                         remote.user = user
                         remote.password = password
                     sshPut remote: remote, from: 'target/ibt-maven-4.1-SNAPSHOT.jar', into: '/opt/tomcat/webapps'
                    }
               }


            }
          }


    }
}