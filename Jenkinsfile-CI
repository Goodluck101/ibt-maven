pipeline {
    tools {
            maven 'Maven_3.9'
          }
    agent any

    stages {
        stage('Git Checkout') {
            steps {
             /*   checkout changelog: false, poll: false, scm: scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'GitHub-login-creds', url: 'https://github.com/Goodluck101/ibt-maven.git']]) */
                checkout changelog: false, poll: false, scm: scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'Senior-DevOps-Teaam', url: 'https://github.com/Goodluck101/ibt-maven.git']])
            }
        }
        stage('Validate'){
            steps {
            withMaven(maven: 'Maven_3.9') {
                sh 'mvn validate'
            }
            }
        }
        stage('Compile'){
                    steps {
                    withMaven(maven: 'Maven_3.9') {
                        sh 'mvn compile'
               }
            }
        }
        stage('Run Test'){
                    steps {
                    withMaven(maven: 'Maven_3.9') {
                        sh 'mvn test'
                    }
              }
        }
        stage('SonarQube Analysis') {
        environment{
          sonarScan = tool 'NexGenix-SQ'
        }
           // def mvn = tool 'Default Maven';
               steps {
            withSonarQubeEnv(credentialsId: 'NexGenix-SQ-cred', installationName: 'NexGenix-SQ-for-Jenkins') {
            //  sh "${mvn}/bin/mvn clean verify sonar:sonar -Dsonar.projectKey=Maven-Project"
                sh "$sonarScan/bin/sonar-scanner"
                }
          }
    }
        stage('Package'){
            steps {
               withMaven(maven: 'Maven_3.9') {
               sh 'mvn package'
                 }
            }
       }
      /* stage('Vulnerability scan - Dependency Check'){
                   steps {
                      dependencyCheck additionalArguments: '''
                                                         -o "./"
                                                         -s "./"
                                                         -f "ALL"
                                                         --prettyPrint ''', odcInstallation: 'dependency-check'
                      dependencyCheckPublisher pattern: 'dependency-check-report.xml'

              }
         }*/

        stage('Deploy to Artifactory'){
            steps {
            withCredentials([file(credentialsId: 'mvn-settings', variable: 'mvn_settings')]) {
              withMaven(maven: 'Maven_3.9') {
                          sh 'mvn deploy -s $mvn_settings'
                     }
                 }
            }
        }
        stage('Configure server - run ansible playbook')
        {
            steps{
            /*    ansiblePlaybook credentialsId: 'Senior-DevOps-Teaam', inventory: 'hosts', playbook: 'tomcat-install.yml', vaultTmpPath: '' */
                ansiblePlaybook become: true, colorized: true, credentialsId: 'private-key', disableHostKeyChecking: true, installation: 'Ansible', inventory: 'hosts', playbook: 'tomcat-install.yml', vaultTmpPath: ''
             /*    ansiblePlaybook(
                                 become: true,
                                 colorized: true,
                                 credentialsId: 'Senior-DevOps-Teaam',
                                 disableHostkeyChecking: true,
                                 inventory: 'hosts',
                                 playbook: 'tomcat-install.yml'
                                 ) */
            }
        }
        stage('Deploy to Dev'){
        when {
            expression{
                env.BRANCH_NAME=='main'
            }
        }
        }
        steps{
            script{
                def remote = [name: 'dev-server', host: '161.35.171.0', allowAnyHosts: true]
                withCredentials
                   remote.user = username
                   remote.password = password
                   sshPut remote: remote, from: 'target/ibt-maven-1.0-SNAPSHOT.jar', into: 'opt/tomcat/apps'
            }
        }
    }
}