pipeline{
  agent any
  stages{
     stage('hello world'){
       steps{
        echo "hello world, my name is oladimeji Akisanya"
       }
     } //stage 1
     stage('hi'){
         steps{
          echo "love my world"
         }
     } // stages 2
     stage('download fro GIT'){
       steps{
             git branch: 'feature_oakisanya', changelog: false, credentialsId: 'GitHub_cred_oakisanyao', poll: false, url: 'https://github.com/IBT-learning/ibt-maven.git'
       }
     } //stage 3

     stage('validate'){
              steps{
                 withMaven(maven:'maven_3.9.3') {
                     bat 'mvn validate'
                 }
              }

            }
            stage('compile'){
                     steps{
                         bat 'mvn compile'
                     }

            }
             stage('test'){
                            steps{

                                bat 'mvn test'
                            }

            }

            stage ('sonarQube scan'){
             environment{
                sonarScan = tool 'ibt-sonarqube'
             }
                 steps{
                       withSonarQubeEnv(credentialsId: 'oakisanya_sona', installationName: 'IBT sonarqube') {
                         bat "${env.sonarScan}/bin/sonar-scanner"


                       }

                 }

            }

             stage('package'){
                            steps{
                                bat 'mvn --version'
                                bat 'mvn package'
                            }

             }

              stage('upload to artifactory with config'){
                                   steps{
                                     configFileProvider([configFile(fileId: '2af1feff-7b55-4e20-b5c5-3009d5593b5a', variable: 'repository_settings')]){
                                       bat 'mvn deploy -s %repository_settings%'
                                     }

                                   }
             }

             stage('Dependency Scan'){
               steps{
                  dependencyCheck additionalArguments: '''
                       -o "./"
                       -s "./"
                       -f "ALL"
                       --prettyPrint \'\'\', odcInstallation: \'dependency-check\'''', odcInstallation: 'dependency-check'
                  dependencyCheckPublisher pattern: 'dependency-check-report.xml'
               }
             }

  } //stages
} //pipeline